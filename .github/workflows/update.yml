name: Check Repo Tags
on:
  schedule:
    - cron: "0 0 * * *" # Daily check
  workflow_dispatch:

env:
  TARGET_REPO_NAME: henrygd/beszel
  VERSION_FILE: VERSION.txt

jobs:
  update-repo-tag:
    runs-on: ubuntu-latest
    permissions: # Job-level permissions configuration starts here
      contents: write # 'write' access to repository contents
      pull-requests: write # 'write' access to pull requests
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Checkout Target Repo to Get Tags
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO_NAME }}
          path: .temp
          fetch-depth: 0

      - name: Get Latest Tag
        id: get-tag
        run: |
          cd .temp
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          echo "Latest chronological tag found: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Check tag
        id: check-tag
        run: |
          CURRENT_TAG=$(cat VERSION.txt)
          LATEST_TAG=$(echo ${{ steps.get-tag.outputs.latest_tag }})

          if [ "$CURRENT_TAG" != "$LATEST_TAG" ]; then
            git config --global user.email "actions@github.com"
            git config --global user.name "GitHub Actions"

            echo "${{ steps.get-tag.outputs.latest_tag }}" > ${{ env.VERSION_FILE }}
            git add ${{ env.VERSION_FILE }}
            git commit -m "chore: update submodule to ${{ steps.get-tag.outputs.latest_tag }}"
            git push

            echo "${{ env.TARGET_REPO_NAME }} updated:"
            echo "  From: $CURRENT_TAG"
            echo "  To:   $LATEST_TAG"
            echo "repo_updated=true" >> $GITHUB_OUTPUT
          else
            echo "${{ env.TARGET_REPO_NAME }} already up-to-date $CURRENT_TAG"
            echo "repo_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Create files for upload
        run: |
          mkdir data
          echo ${{ steps.get-tag.outputs.latest_tag }} > data/latest_tag
          echo ${{ steps.check-tag.outputs.repo_updated }} > data/repo_updated

      - name: Update files
        uses: actions/upload-artifact@v4
        with:
          name: repo-data
          path: data
